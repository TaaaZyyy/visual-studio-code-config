{
  "privateMethod": {
    "prefix": ["naibu","private"],
    "body": [
      "// ===================",
      "//  内部メソッド",
      "// ==================="
    ],
    "description": "内部メソッドコメント"
  },

  "debug": {
    "prefix": "sysout",
    "body": [
      "System.debug(LoggingLevel.DEBUG, $1);"
    ],
    "description": "debug"
  },

  "addMessage": {
    "prefix": ["addmsg","addmessage"],
    "body": [
      "ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.${1:CONFIRM,ERROR,FATAL,INFO,WARNING},${2:'msg'} ,${3:'detail'}));"
    ],
    "description": "add message to VF。成功は「CONFIRM」をえらぶ"
  },

  "clone": {
    "prefix": ["clone"],
    "body": [
      "clone(${1:isMaintainedId★false)}, ${2:isDeepClone★true}, false, false)"
    ],
    "description": "SObjectのclone"
  },

  "assert": {
    "prefix": ["assert", "ast"],
    "body": [
      "System.assert($1)"
    ],
    "description": "add message to VF"
  },

  "HTTPパラメータ": {
    "prefix": ["getpara", "get"],
    "body": [
      "ApexPages.CurrentPage().getParameters().get('${1:id}');"
    ],
    "description": "add getparameter"
  },

  "parameter": {
    "prefix": "para",
    "body": [
      "${1:public} ${2:String} ${3} {get; set;}"
    ],
    "description": "add apex parameter"
  },

  "label": {
    "prefix": "label",
    "body": [
      "System.label.${LabelName}"
    ],
    "description": "add label"
  },

  "redirect": {
    "prefix": "redirect",
    "body": [
      "PageReference ref = Page.MyPage;",
      "ref.getParameters().put('id', windowId);",
      "return ref.setRedirect(true);"
    ],
    "description": "add redirect"
  },

  "lightning-component_ResultClass": {
    "prefix": "result",
    "body": [
      "public with sharing class ActionResult {",
      "    public Boolean isSuccess {get; private set;}",
      "    public String  message   {get; private set;}",
      "    public Object  value     {get; private set;}",
      "",
      "    ActionResult(Boolean pIsSuccess, String pMessage, Object pValue) {",
      "        this.isSuccess = pIsSuccess;",
      "        this.message   = pMessage;",
      "        this.value     = pValue;",
      "    }",
      "",
      "    public String getJson() {",
      "        return JSON.serialize(this);",
      "    }",
      "}"
    ],
    "description": "lightning-component resultclass"
  },

  "test_class": {
    "prefix": ["testinit","test"],
    "body": [
      "@isTest",
      "private class ZT_対象クラス名Test {",
      "    private static final User TEST_ADMIN_USER = new User(Id = UserInfo.getUserId()); // テスト実行ユーザ",
      "",
      "    @testSetup static void methodName() {",
      "        System.runAs(TEST_ADMIN_USER) {",
      "            // テストレコード作成",
      "        }",
      "    }",
      "",
      "",
      "",
      "    /**",
      "    * 通常の処理のテスト",
      "    *・の状態で・をすると・になる",
      "    */",
      "    @isTest static void testメソッド名() {",
      "        // 事前準備を記述",
      "        Test.startTest();",
      "        // 実行を記述",
      "        Test.stopTest();",
      "        // 検証を記述",
      "        System.assertEquals(expected,actual,msg);",
      "    }",
      "",
      "",
      "",
      "    /**",
      "    * 例外テスト",
      "    * ・の状態で・をすると・の例外を投げる",
      "    */",
      "    @isTest static void testメソッド名() {",
      "        // 事前準備を記述",
      "        try {",
      "            // 実行を記述",
      "            Calculator.divide(3, 0);",
      "            System.assert(false)",
      "        } catch (MathException e) {",
      "            // 検証を記述",
      "            System.assertEquals('divide by zero.',e.getMessage(),'MathException発生テスト');",
      "        }",
      "    }",
      "",
      "",
      "",
      "    /**",
      "    * addErrorの検証",
      "    * ・の状態で・をすると・のエラーになる",
      "    */",
      "    @isTest static void testメソッド名() {",
      "        // 事前準備を記述",
      "        try {",
      "            // 実行を記述",
      "            TenantUser__c tenantUser2 = ZT_000_CommonTest.generateLoginUser(account);",
      "            System.assert(false)",
      "        } catch(Exception e) {",
      "            // 検証を記述",
      "            System.assert(e.getMessage().contains('管理者ユーザの発行数上限に達したため、追加出来ません。'));",
      "        }",
      "    }",
      "}"
    ],
    "description": "init_testclass"
  },

  "trriger_init": {
    "prefix": ["trinit","tginit","triginit","triggerinit","trigger"],
    "body": [
      "/**",
      "* ${1:SObjectLabelNameトリガ}",
      "*/",
      "trigger ${2:TriggerName} on ${3:SObjectName} (",
      "        before insert,",
      "        after  insert,",
      "        before update,",
      "        after  update,",
      "        before delete,",
      "        after  delete,",
      "        after  undelete) {",
      "",
      "    ${4:TriggerName}Handler handler = new ${4:TriggerName}Handler( Trigger.isExecuting, Trigger.size );",
      "",
      "    switch on Trigger.operationType {",
      "        when BEFORE_INSERT  { handler.onBeforeInsert(Trigger.new                                             ); }",
      "        when AFTER_INSERT   { handler.onAfterInsert( Trigger.new,                              Trigger.newMap); }",
      "        when BEFORE_UPDATE  { handler.onBeforeUpdate(Trigger.old, Trigger.new, Trigger.oldMap, Trigger.newMap); }",
      "        when AFTER_UPDATE   { handler.onAfterUpdate( Trigger.old, Trigger.new, Trigger.oldMap, Trigger.newMap); }",
      "        when BEFORE_DELETE  { handler.onBeforeDelete(Trigger.old,              Trigger.oldMap                ); }",
      "        when AFTER_DELETE   { handler.onAfterDelete( Trigger.old,              Trigger.oldMap                ); }",
      "        when AFTER_UNDELETE { handler.onUndelete(    Trigger.new                                             ); }",
      "    }",
      "}"
    ],
    "description": "init trigger"
  },

  "trriger-handler_init": {
    "prefix": ["thinit","handinit","handler","handlerinit"],
    "body": [
      "public without sharing class ${1:TriggerHandlerName} {",
      "",
      "    protected boolean isExecuting = false; // Apexコードの現在のコンテキストがトリガのみかどうか",
      "    protected integer batchSize   = 0;     // バッチサイズ",
      "",
      "",
      "",
      "    /** コンストラクタ */",
      "    public ${1:TriggerName}(Boolean pIsExecuting, Integer pBatchSize) {",
      "        this.isExecuting = pIsExecuting;",
      "        this.batchSize   = pBatchSize;",
      "    }",
      "",
      "",
      "",
      "    /** 登録前処理 */",
      "    public void onBeforeInsert(List<SObject> newList) {",
      "        System.debug(Logginglevel.INFO, '>>> onBeforeInsert');",
      "    }",
      "",
      "",
      "",
      "    /** 登録後処理 */",
      "    public void onAfterInsert(List<SObject> newList, Map<Id, SObject> newMap) {",
      "        System.debug(Logginglevel.INFO, '>>> onAfterInsert');",
      "    }",
      "",
      "",
      "",
      "    /** 更新前処理 */",
      "    public void onBeforeUpdate(List<SObject> oldList, List<SObject> newList, Map<Id, SObject> oldMap, Map<Id, SObject> newMap) {",
      "        System.debug(Logginglevel.INFO, '>>> onBeforeUpdate');",
      "    }",
      "",
      "",
      "",
      "    /** 更新後処理 */",
      "    public void onAfterUpdate(List<SObject> oldList, List<SObject> newList, Map<Id, SObject> oldMap, Map<Id, SObject> newMap) {",
      "        System.debug(Logginglevel.INFO, '>>> onAfterUpdate');",
      "    }",
      "",
      "",
      "",
      "    /** 削除前処理 */",
      "    public void onBeforeDelete(List<SObject> oldList, Map<Id, SObject> oldMap) {",
      "        System.debug(Logginglevel.INFO, '>>> onBeforeDelete');",
      "    }",
      "",
      "",
      "",
      "    /** 削除後処理 */",
      "    public void onAfterDelete(List<SObject> oldList, Map<Id, SObject> oldMap) {",
      "        System.debug(Logginglevel.INFO, '>>> onAfterDelete');",
      "    }",
      "",
      "",
      "",
      "    /** 復元後処理 */",
      "    public void onUndelete(List<SObject> newList) {",
      "        System.debug(Logginglevel.INFO, '>>> onUndelete');",
      "    }",
      "",
      "",
      "// ==============",
      "//   内部処理",
      "// ==============",
      "",
      "}"
    ],
    "description": "init trigger-handler"
  },



  "batch": {
    "prefix": ["batchinit","batch","scheduleinit","schdule","sch"],
    "body": [
      "/**",
      "* バッチ",
      "*/",
      "global with sharing class ${1:BatchName} implements Database.Batchable<SObject>, Schedulable, Database.stateful {",
      "",
      "    global static final Integer BATCH_SIZE = 200;",
      "    private Date targetDate;",
      "",
      "",
      "",
      "    /** スケジュール起動*/",
      "    global static void execute(SchedulableContext sc) {",
      "        Date targetDate = Date.today();",
      "        System.debug('### Returned batch process ID: ' + Database.executeBatch(new BatchName(targetDate), BATCH_SIZE));",
      "    }",
      "",
      "",
      "",
      "    /** コンストラクタ */",
      "    global BatchName() {",
      "        this.targetDate = Date.today();",
      "    }",
      "",
      "",
      "",
      "    /** コンストラクタ */",
      "    global BatchName(Date pTargetDate) {",
      "        this.targetDate = pTargetDate;",
      "    }",
      "",
      "",
      "",
      "    /** 開始メソッド */",
      "    global Database.QueryLocator start(Database.BatchableContext BC) {",
      "        System.debug('### start ###');",
      "",
      "        // ジョブを終了する場合",
      "        // System.abortJob(bc.getJobId());",
      "",
      "        return getQueryLocator();",
      "    }",
      "",
      "",
      "",
      "    /** 実行メソッド */",
      "    global void execute(Database.BatchableContext BC, List<${2:SObject}> ${3:scope}) {",
      "        System.debug('### execute ###');",
      "    }",
      "",
      "",
      "",
      "    /** 終了メソッド */",
      "    global void finish(Database.BatchableContext BC) {",
      "        System.debug('### finish ###');",
      "    }",
      "",
      "",
      "",
      "// ===================",
      "//  内部メソッド",
      "// ===================",
      "    /** 取得メソッド */",
      "    private Database.QueryLocator getQueryLocator() {",
      "        return Database.getQueryLocator([  ]);",
      "    }",
      "}"
    ],
    "description": "batch init"
  },

  "executebatch": {
    "prefix": "executebatch",
    "body": [
      "Database.executeBatch(new ${1:BatchName}(), 200);"
    ],
    "description": "execute batch"
  },

  "queueable apex": {
    "prefix": ["que","queinit","queueable","queueableinit"],
    "body": [
      "public class UpdateParentAccount implements Queueable {",
      "",
      "    private List<Account> accounts;",
      "    private ID parent;",
      "",
      "    public UpdateParentAccount(List<Account> records, ID id) {",
      "        this.accounts = records;",
      "        this.parent = id;",
      "    }",
      "    public void execute(QueueableContext context) {",
      "        for (Account account : accounts) {",
      "          account.parentId = parent;",
      "          // perform other processing or callout",
      "        }",
      "        update accounts;",
      "    }",
      "    /* 使用法 */",
      "    // find all accounts in ‘NY’",
      "    //     List<Account> accounts = [select id from account where billingstate = ‘NY’];",
      "    // find a specific parent account for all records",
      "    //    Id parentId = [select id from account where name = 'ACME Corp'][0].Id;",
      "    // instantiate a new instance of the Queueable class",
      "    //    UpdateParentAccount updateJob = new UpdateParentAccount(accounts, parentId);",
      "    // enqueue the job for processing",
      "    //    ID jobID = System.enqueueJob(updateJob);",
      "}"
    ],
    "description": "queueable apex"
  },

  "queueable test": {
    "prefix": ["quetest","queueabletest"],
    "body": [
      "@isTest",
      "public class UpdateParentAccountTest {",
      "    @testSetup",
      "    static void setup() {",
      "        List<Account> accounts = new List<Account>();",
      "        // add a parent account",
      "        accounts.add(new Account(name='Parent'));",
      "        // add 100 child accounts",
      "        for (Integer i = 0; i < 100; i++) {",
      "            accounts.add(new Account(",
      "                name='Test Account'+i",
      "            ));",
      "        }",
      "        insert accounts;",
      "    }",
      "",
      "    static testmethod void testQueueable() {",
      "        // query for test data to pass to queueable class",
      "        Id parentId = [select id from account where name = 'Parent'][0].Id;",
      "        List<Account> accounts = [select id, name from account where name like 'Test Account%'];",
      "        // Create our Queueable instance",
      "        UpdateParentAccount updater = new UpdateParentAccount(accounts, parentId);",
      "        // startTest/stopTest block to force async processes to run",
      "        Test.startTest();",
      "        System.enqueueJob(updater);",
      "        Test.stopTest();",
      "        // Validate the job ran. Check if record have correct parentId now",
      "        System.assertEquals(100, [select count() from account where parentId = :parentId]);",
      "    }",
      "",
      "}"
    ],
    "description": "queueable test"
  },

  "rollback": {
    "prefix": ["rollback","sp","savepoint","save"],
    "body": [
      "Savepoint sp = Database.setSavepoint();",
      "try {",
      "} catch (Exception e) {",
      "    Database.rollback(sp);",
      "    throw e;",
      "}"
    ],
    "description": "rollback"
  },

  "try_catch": {
    "prefix": ["try","catch"],
    "body": [
      "try {",
      "} catch (Exception e) {",
      "    System.debug(LoggingLevel.ERROR, 'error: '      + e.getMessage());",
      "    System.debug(LoggingLevel.ERROR, 'stacktrace: ' + e.getStackTraceString());",
      "    ApexPages.addMessages(e);",
      "    return null;",
      "}"
    ],
    "description": "try_catch"
  },

  "exception": {
    "prefix": "exception",
    "body": [
      "public class MyException extends Exception {}"
    ],
    "description": "exception"
  },

  "restApi": {
    "prefix": "rest",
    "body": [
      "// /services/apexrest/Cases/[Id]",
      "@RestResource(urlMapping='/Cases/*')",
      "global with sharing class CaseManager {",
      "    @HttpGet",
      "    global static Case getCaseById() {",
      "        RestRequest request = RestContext.request;",
      "        // grab the caseId from the end of the URL",
      "        String caseId = request.requestURI.substring(",
      "          request.requestURI.lastIndexOf('/')+1);",
      "        Case result =  [SELECT CaseNumber,Subject,Status,Origin,Priority",
      "                        FROM Case",
      "                        WHERE Id = :caseId];",
      "        return result;",
      "    }",
      "    @HttpPost",
      "    global static ID createCase(String subject, String status,",
      "        String origin, String priority) {",
      "        Case thisCase = new Case(",
      "            Subject=subject,",
      "            Status=status,",
      "            Origin=origin,",
      "            Priority=priority);",
      "        insert thisCase;",
      "        return thisCase.Id;",
      "    }",
      "    @HttpDelete",
      "    global static void deleteCase() {",
      "        RestRequest request = RestContext.request;",
      "        String caseId = request.requestURI.substring(",
      "            request.requestURI.lastIndexOf('/')+1);",
      "        Case thisCase = [SELECT Id FROM Case WHERE Id = :caseId];",
      "        delete thisCase;",
      "    }",
      "    @HttpPut",
      "    global static ID upsertCase(String subject, String status,",
      "        String origin, String priority, String id) {",
      "        Case thisCase = new Case(",
      "                Id=id,",
      "                Subject=subject,",
      "                Status=status,",
      "                Origin=origin,",
      "                Priority=priority);",
      "        // Match case by Id, if present.",
      "        // Otherwise, create new case.",
      "        upsert thisCase;",
      "        // Return the case ID.",
      "        return thisCase.Id;",
      "    }",
      "    @HttpPatch",
      "    global static ID updateCaseFields() {",
      "        RestRequest request = RestContext.request;",
      "        String caseId = request.requestURI.substring(",
      "            request.requestURI.lastIndexOf('/')+1);",
      "        Case thisCase = [SELECT Id FROM Case WHERE Id = :caseId];",
      "        // Deserialize the JSON string into name-value pairs",
      "        Map<String, Object> params = (Map<String, Object>)JSON.deserializeUntyped(request.requestbody.tostring());",
      "        // Iterate through each parameter field and value",
      "        for(String fieldName : params.keySet()) {",
      "            // Set the field and value on the Case sObject",
      "            thisCase.put(fieldName, params.get(fieldName));",
      "        }",
      "        update thisCase;",
      "        return thisCase.Id;",
      "    }",
      "}"
    ],
    "description": ""
  },

  "futre": {
    "prefix": "future",
    "body": [
      "@future",
      "private static void myFutureMethod() {",
      "    // Perform some operations",
      "}"
    ],
    "description": "future method"
  }
}