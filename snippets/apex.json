{
  "debug": {
    "prefix": "sysout",
    "body": [
      "System.debug( LoggingLevel.DEBUG, $1 );"
    ],
    "description": "debug"
  },

  "test_class": {
    "prefix": "testinit",
    "body": [
      "@isTest",
      "private class ZT_対象クラス名Test {",
      "    private static final User TEST_ADMIN_USER = new User(Id = UserInfo.getUserId()); // テスト実行ユーザ",
      "",
      "    @testSetup static void methodName() {",
      "        System.runAs( TEST_ADMIN_USER ) {",
      "            // テストレコード作成",
      "        }",
      "    }",
      "",
      "",
      "",
      "    /**",
      "    * 通常の処理のテスト",
      "    *・の状態で・をすると・になる",
      "    */",
      "    @isTest static void testメソッド名() {",
      "         // 事前準備を記述",
      "        Test.startTest();",
      "        // 実行を記述",
      "        Test.stopTest();",
      "        // 検証を記述",
      "        System.assertEquals(expected,actual,msg);",
      "    }",
      "",
      "",
      "",
      "    /**",
      "    * 例外テスト",
      "    * ・の状態で・をすると・の例外を投げる",
      "    */",
      "    @isTest static void testメソッド名() {",
      "        // 事前準備を記述",
      "        try {",
      "            // 実行を記述",
      "            Calculator.divide(3, 0);",
      "        } catch (MathException e) {",
      "            // 検証を記述",
      "            System.assertEquals('divide by zero.',e.getMessage(),'MathException発生テスト');",
      "        }",
      "    }",
      "",
      "",
      "",
      "    /**",
      "    * addErrorの検証",
      "    * ・の状態で・をすると・のエラーになる",
      "    */",
      "    @isTest static void testメソッド名() {",
      "        // 事前準備を記述",
      "        try {",
      "            // 実行を記述",
      "            TenantUser__c tenantUser2 = ZT_000_CommonTest.generateLoginUser(account);",
      "        } catch(Exception e) {",
      "            // 検証を記述",
      "                System.assert(e.getMessage().contains('管理者ユーザの発行数上限に達したため、追加出来ません。'));",
      "        }",
      "    }",
      "}",
    ],
    "description": "init_testclass"
  },
}
