{
  "debug": {
    "prefix": "sysout",
    "body": [
      "System.debug( LoggingLevel.DEBUG, $1 );"
    ],
    "description": "debug"
  },

  "addMessage": {
    "prefix": "addmsg",
    "body": [
      "ApexPages.addMessage( new ApexPages.Message( ApexPages.Severity.${1:CONFIRM,ERROR,FATAL,INFO,WARNING},${2:'msg'} ,${3:'detail'}));"
    ],
    "description": "add message to VF"
  },

  "lightning-component_ResultClass": {
    "prefix": "result",
    "body": [
      "public with sharing class ActionResult {",
      "  public Boolean isSuccess {get; private set;}",
      "  public String  message   {get; private set;}",
      "  public Object  value     {get; private set;}",
      "",
      "  ActionResult(Boolean pIsSuccess, String pMessage, Object pValue) {",
      "      this.isSuccess = pIsSuccess;",
      "      this.message   = pMessage;",
      "      this.value     = pValue;",
      "  }",
      "",
      "  public String getJson() {",
      "      return JSON.serialize(this);",
      "  }",
      "}",
    ],
    "description": "lightning-component resultclass"
  },

  "savePoint": {
    "prefix": ["sp","savepoint","save"],
    "body": [
      "SavePoint sp = Database.setSavePoint();",
      "try {",
      "} catch (Exception e) {",
      "    Database.rollback(sp);",
      "    throw e;",
      "}",
    ],
    "description": "add savepoint"
  },

  "test_class": {
    "prefix": "testinit",
    "body": [
      "@isTest",
      "private class ZT_対象クラス名Test {",
      "    private static final User TEST_ADMIN_USER = new User(Id = UserInfo.getUserId()); // テスト実行ユーザ",
      "",
      "    @testSetup static void methodName() {",
      "        System.runAs(TEST_ADMIN_USER) {",
      "            // テストレコード作成",
      "        }",
      "    }",
      "",
      "",
      "",
      "    /**",
      "    * 通常の処理のテスト",
      "    *・の状態で・をすると・になる",
      "    */",
      "    @isTest static void testメソッド名() {",
      "         // 事前準備を記述",
      "        Test.startTest();",
      "        // 実行を記述",
      "        Test.stopTest();",
      "        // 検証を記述",
      "        System.assertEquals(expected,actual,msg);",
      "    }",
      "",
      "",
      "",
      "    /**",
      "    * 例外テスト",
      "    * ・の状態で・をすると・の例外を投げる",
      "    */",
      "    @isTest static void testメソッド名() {",
      "        // 事前準備を記述",
      "        try {",
      "            // 実行を記述",
      "            Calculator.divide(3, 0);",
      "            System.assert(false)",
      "        } catch (MathException e) {",
      "            // 検証を記述",
      "            System.assertEquals('divide by zero.',e.getMessage(),'MathException発生テスト');",
      "        }",
      "    }",
      "",
      "",
      "",
      "    /**",
      "    * addErrorの検証",
      "    * ・の状態で・をすると・のエラーになる",
      "    */",
      "    @isTest static void testメソッド名() {",
      "        // 事前準備を記述",
      "        try {",
      "            // 実行を記述",
      "            TenantUser__c tenantUser2 = ZT_000_CommonTest.generateLoginUser(account);",
      "            System.assert(false)",
      "        } catch(Exception e) {",
      "            // 検証を記述",
      "            System.assert(e.getMessage().contains('管理者ユーザの発行数上限に達したため、追加出来ません。'));",
      "        }",
      "    }",
      "}",
    ],
    "description": "init_testclass"
  },

  "trriger_init": {
    "prefix": ["trinit","triginit","triggerinit"],
    "body": [
      "trigger ${1:TriggerName} on ${2:SObject} (",
      "        before insert,",
      "        after  insert,",
      "        before update,",
      "        after  update,",
      "        before delete,",
      "        after  undelete ) {",
      "",
      "    ${3:TriggerHandler} handler = new ${4:TriggerHandler}( Trigger.isExecuting, Trigger.size );",
      "",
      "    if      (Trigger.isInsert && Trigger.isBefore) { handler.onBeforeInsert(Trigger.new                                             ); }",
      "    else if (Trigger.isInsert && Trigger.isAfter ) { handler.onAfterInsert( Trigger.new,                              Trigger.newMap); }",
      "    else if (Trigger.isUpdate && Trigger.isBefore) { handler.onBeforeUpdate(Trigger.old, Trigger.new, Trigger.oldMap, Trigger.newMap); }",
      "    else if (Trigger.isUpdate && Trigger.isAfter ) { handler.onAfterUpdate( Trigger.old, Trigger.new, Trigger.oldMap, Trigger.newMap); }",
      "    else if (Trigger.isDelete && Trigger.isBefore) { handler.onBeforeDelete(Trigger.old,              Trigger.oldMap                ); }",
      "    else if (Trigger.isDelete && Trigger.isAfter ) { handler.onAfterDelete( Trigger.old,              Trigger.oldMap                ); }",
      "    else if (Trigger.isUnDelete                  ) { handler.onUndelete(    Trigger.new                                             ); }",
      "}",
    ],
    "description": "init trigger"
  },

  "trriger-handler_init": {
    "prefix": ["handinit","handler","handlerinit"],
    "body": [
      "public with sharing class ${1:TriggerHandlerName} {",
      "",
      "  protected boolean isExecuting = false; // Apexコードの現在のコンテキストがトリガのみかどうか",
      "  protected integer batchSize   = 0;     // バッチサイズ",
      "",
      "",
      "",
      "  /** コンストラクタ */",
      "  public ${2:TriggerName}(Boolean pIsExecuting, Integer pBatchSize){",
      "      this.isExecuting = pIsExecuting;",
      "      this.batchSize   = pBatchSize;",
      "  }",
      "",
      "",
      "",
      "  /** 登録前処理 */",
      "  public void onBeforeInsert(List<SObject> newList){",
      "      System.debug(Logginglevel.INFO, '>>> onBeforeInsert');",
      "  }",
      "",
      "",
      "",
      "  /** 登録後処理 */",
      "  public void onAfterInsert(List<SObject> newList, Map<Id, SObject> newMap){",
      "      System.debug(Logginglevel.INFO, '>>> onAfterInsert');",
      "  }",
      "",
      "",
      "",
      "  /** 更新前処理 */",
      "  public void onBeforeUpdate(List<SObject> oldList, List<SObject> newList, Map<Id, SObject> oldMap, Map<Id, SObject> newMap){",
      "      System.debug(Logginglevel.INFO, '>>> onBeforeUpdate');",
      "  }",
      "",
      "",
      "",
      "  /** 更新後処理 */",
      "  public void onAfterUpdate(List<SObject> oldList, List<SObject> newList, Map<Id, SObject> oldMap, Map<Id, SObject> newMap){",
      "      System.debug(Logginglevel.INFO, '>>> onAfterUpdate');",
      "  }",
      "",
      "",
      "",
      "  /** 削除前処理 */",
      "  public void onBeforeDelete(List<SObject> oldList, Map<Id, SObject> oldMap){",
      "      System.debug(Logginglevel.INFO, '>>> onBeforeDelete');",
      "  }",
      "",
      "",
      "",
      "  /** 削除後処理 */",
      "  public void onAfterDelete(List<SObject> oldList, Map<Id, SObject> oldMap){",
      "      System.debug(Logginglevel.INFO, '>>> onAfterDelete');",
      "  }",
      "",
      "",
      "",
      "  /** 復元後処理 */",
      "  public void onUndelete(List<SObject> newList){",
      "      System.debug(Logginglevel.INFO, '>>> onUndelete');",
      "  }",
      "",
      "",
      "// ==============",
      "//   内部処理",
      "// ==============",
      "",
      "}",
    ],
    "description": "init trigger-handler"
  },
}
